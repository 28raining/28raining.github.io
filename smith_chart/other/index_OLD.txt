<head>
  <!-- Plotly.js -->
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
          <link href='http://fonts.googleapis.com/css?family=Lato:300,400,700' rel='stylesheet' type='text/css' />
  </head>
<style>

.cell {
	display: inline-block;
	z-index: -100;
	width: 150px;
}

.cell_w_hover:hover { 
    background-color: rgb(133, 203, 247);
}

.cell_w_hover:hover img { 
    opacity: .5;
}

.cell_w_hover:hover p { 
    opacity: .5;
}
	
.cell p { 
	text-align: center;
	border: 0px;
	margin: 0px;
	background-color: white;
}
.cell img { 
	width: 100%;
	height : auto;
	border: 0px;
	margin: 0px;
}

input, .complex_box, .complex_box_wide {
	max-width:35%;
	display:inline-block;
	line-height:28px;
}

.complex_box_wide {
	max-width:60%;
}

.abs_box {
	display:inline-block;
}

.spacer {
	width:5%;
	height:auto;
	display:inline-block;
	font-weight:bold;
}

.svg-container {
	z-index:-1;
}

h { 
	width:100%;
	display:block;
	margin:20px;
}

.global_inputs {
	margin:20px;
	display:inline-block;
}

.id_tag { 
	width:100%;
}

</style>
<link rel="stylesheet" type="text/css" href="css/style.css" />
<body>

<h>Online Smith Chart Tool</h>
<div class="global_inputs">
	<div class="id_tag">Operational Frequency</div>
	<input type="number" value="2440" id="freq" onchange="freq_no_unit=this.value; update_schem();"></input>
	<div id="freq_sel" class="wrapper-dropdown-5" tabindex="1" onclick="change_class(this.id)">
		<div>MHz</div>
		<ul class="dropdown">
			<li onclick="updatespan(parentElement.parentElement.id,'Hz')"><a href="#">Hz</a></li>
			<li onclick="updatespan(parentElement.parentElement.id,'KHz')"><a href="#">KHz</a></li>
			<li onclick="updatespan(parentElement.parentElement.id,'MHz')"><a href="#">MHz</a></li>
			<li onclick="updatespan(parentElement.parentElement.id,'GHz')"><a href="#">GHz</a></li>
			<li onclick="updatespan(parentElement.parentElement.id,'THz')"><a href="#">THz</a></li>
		</ul>
	</div>
</div>
<div class="spacer"></div>
<div class="global_inputs">
	<div class="id_tag">Characteristic Impedance</div>
	<input type="number" value="50" id="zo" onchange="zo=this.value; update_schem();"></input>Ω
</div>
<div class="global_inputs">
	<a id="downloadAnchorElem"><button>Download schematic</button></a>
</div>

<input type="file" id="file" name="file" enctype="multipart/form-data" />


<p>
Click to add a components
</p>

  <!--<div id="cell_picker">
	      <div class="cell" onclick="clicked_cell('bb')">
		<p>Black Box</p><img src="icons/black_box.png" alt="Black Box">
	</div>-->
	<div class="cell cell_w_hover" onclick="clicked_cell('sc')">
		<p>Series Capacitor</p><img src="icons/capacitor_series.png" alt="Series Capacitor">
	</div><div class="cell cell_w_hover" onclick="clicked_cell('pc')">
		<p>Parallel Capacitor</p><img src="icons/capacitor_parallel.png" alt="Parallel Capacitor">
	</div><div class="cell cell_w_hover" onclick="clicked_cell('si')">
		<p>Series Inductor</p><img src="icons/inductor_series.png" alt="Series Inductor">
	</div><div class="cell cell_w_hover" onclick="clicked_cell('pi')">
		<p>Parallel Inductor</p><img src="icons/inductor_parallel.png" alt="Parallel Inductor">
	</div><div class="cell cell_w_hover" onclick="clicked_cell('sr')">
		<p>Series Resistor</p><img src="icons/resistor_series.png" alt="Series Resistor">
	</div><div class="cell cell_w_hover" onclick="clicked_cell('pr')">
		<p>Parallel Resistor</p><img src="icons/resistor_parallel.png" alt="Parallel Resistor">
	</div><div class="cell cell_w_hover" onclick="clicked_cell('tl')">
		<p>Transmission Line</p><img src="icons/transmission_line.png" alt="Transmission Line">
	</div>
  </div>

<p>
Your current schematic 
<div class="spacer">The final impedance is:</div><div id="current_impedance"></div>
<div class="spacer">The final admittance is:</div><div id="current_admittance"></div>
<div class="spacer">The final reflection coefficient is:</div><div id="current_reflection"></div>
</p> 
<div id="schematic"><div class="cell"><p>Key</p><p>Absolute</p><p>Real</p><p>Imaginary</p><img></div>
</div>

<!--<div id="dd" class="wrapper-dropdown-5" tabindex="1">
	<span>Transport</span>
	<ul class="dropdown">
		<li><a href="#"><i></i>Classic mail</a></li>
		<li><a href="#"><i class="icon-truck icon-large"></i>UPS Delivery</a></li>
		<li><a href="#"><i class="icon-plane icon-large"></i>Private jet</a></li>
	</ul>
</div>-->

<script>

document.getElementById('file').addEventListener('change', readFile, false);

function readFile (evt) {
	var files = evt.target.files;
	var file = files[0];           
	var reader = new FileReader();
	reader.onload = function(event) {
		console.log(event.target.result); 
		schematic = JSON.parse(event.target.result);
		update_schem();
	}
	reader.readAsText(file);
}

function change_class(this_id) {
	document.getElementById(this_id).classList.toggle("active");
}

function updatespan(this_id,this_val) {
	if ((this_val[this_val.length-2]+this_val[this_val.length-1])=='Hz') {
		if      (this_val == 'Hz') freq_multiplier = 1;
		else if (this_val == 'KHz') freq_multiplier = 1e3;
		else if (this_val == 'MHz') freq_multiplier = 1e6;
		else if (this_val == 'GHz') freq_multiplier = 1e9;
		else if (this_val == 'THz') freq_multiplier = 1e12;		
	} else {
		var sch_num = this_id.split('_')[1];
		schematic[sch_num].unit = this_val;
		is_active[sch_num]="active";
	}
	document.getElementById(this_id).children[0].innerText=this_val;
	update_schem();
	is_active=[];
}
</script>

<!--
<div id="dd_wdk" class="wrapper-dropdown-5" tabindex="1" onclick="change_class(this.id)">
	<div>Unit</div>
	<ul class="dropdown">
		<li onclick="updatespan(parentElement.parentElement.id,'mF')"><a href="#">mF</a></li>
		<li onclick="updatespan(parentElement.parentElement.id,'uF')"><a href="#">uF</a></li>
		<li onclick="updatespan(parentElement.parentElement.id,'nF')"><a href="#">nF</a></li>
		<li onclick="updatespan(parentElement.parentElement.id,'pF')"><a href="#">pF</a></li>
	</ul>
</div>-->




  <div id="myDiv"><!-- Plotly chart will be drawn inside this DIV --></div>
  <script>
  var num_elements=1;
  var schematic = [];
  var zo=50;
  var freq_no_unit=2440;
  var freq_multiplier=1e6;
  var freq=2440e6;
  var is_active=[];
  var precision=3;
  var start_x_coord=0;
  var start_y_coord=0;
  var end_x_coord=0;
  var end_y_coord=0;
  
  schematic.push({num : 0, type:'bb',real:1,imaginary:0,abs:50,abs_bb_i:0,unit:'null'});
  
function one_over_complex(real, imaginary) {
	var realn = real/(real*real + imaginary*imaginary);
	var imaginaryn = -imaginary/(real*real + imaginary*imaginary);
	return [realn,imaginaryn];
}

function clicked_cell(type) {
	if (type == "pr") {
		//div.innerHTML = "<p>Parallel Resistor</p><p><input type=\"number\" value=0 onchange=\"update_schem("+num_elements+",this,'real')\"></input></p><img src=\"icons/resistor_parallel.png\" alt=\"Parallel Resistor\">";
		schematic.push({num : num_elements, type:'pr',real:0,imaginary:0,abs:1,unit:'Ω'});
	} else if (type=="sr") {
		//div.innerHTML = "<p>Series Resistor</p><p><input type=\"number\" value=0 onchange=\"update_schem("+num_elements+",this,'real')\"></input></p><img src=\"icons/resistor_series.png\" alt=\"Series Resistor\">";
		schematic.push({num : num_elements, type:'sr',real:0,imaginary:0,abs:1,unit:'Ω'});
	} else if (type=="si") {
		//div.innerHTML = "<p>Series Inductor</p><p><input type=\"number\" value=0 onchange=\"update_schem("+num_elements+",this,'imag')\"></input></p><img src=\"icons/inductor_series.png\" alt=\"Series Inductor\">";
		schematic.push({num : num_elements, type:'si',real:0,imaginary:0,abs:1,unit:'nH'});
	} else if (type=="pi") {
		//div.innerHTML = "<p>Parallel Inductor</p><p><input type=\"number\" value=0 onchange=\"update_schem("+num_elements+",this,'imag')\"></input></p><img src=\"icons/inductor_parallel.png\" alt=\"Parallel Inductor\">";
		schematic.push({num : num_elements, type:'pi',real:0,imaginary:0,abs:1,unit:'nH'});
	} else if (type=="sc") {
		//div.innerHTML = "<p>Series Capacitor</p><p><input type=\"number\" value=0 onchange=\"update_schem("+num_elements+",this,'imag')\"></input></p><img src=\"icons/capacitor_series.png\" alt=\"Series Capacitor\">";
		schematic.push({num : num_elements, type:'sc',real:0,imaginary:0,abs:1,unit:'pF'});
	} else if (type=="pc") {
		//div.innerHTML = "<p>Parallel Capacitor</p><p><input type=\"number\" value=0 onchange=\"update_schem("+num_elements+",this,'imag')\"></input></p><img src=\"icons/capacitor_parallel.png\" alt=\"Parallel Capacitor\">";
		schematic.push({num : num_elements, type:'pc',real:0,imaginary:0,abs:1,unit:'pF'});
	} else if (type=="tl") {
		//div.innerHTML = "<p>Parallel Capacitor</p><p><input type=\"number\" value=0 onchange=\"update_schem("+num_elements+",this,'imag')\"></input></p><img src=\"icons/capacitor_parallel.png\" alt=\"Parallel Capacitor\">";
		schematic.push({num : num_elements, type:'tl',line_length:1e-3,abs:1,line_zo:50,er:4,unit:'mm',real:0,imaginary:0});
	//} else if (type=="bb") {
	//	//div.innerHTML = "<p>Black Box</p><p>null</p><p><input type=\"number\" value=0 onchange=\"update_schem("+num_elements+",this,'real')\"></input></p><p><input type=\"number\" value=0 onchange=\"update_schem("+num_elements+",this,'imag')\"></input></p><img src=\"icons/black_box.png\" alt=\"Black Box\">";
	//	schematic.push({num : num_elements, type:'bb',real:0,imaginary:0,abs:0,abs_bb_i:0,unit:'null'});
	}
	//console.log(schematic);
	update_schem();
	num_elements=num_elements+1;
}

function update_schem_abs(target_num, obj, complex) {
	switch(schematic[target_num].type) {
		case ("bb") :
			if (complex=="abs") schematic[target_num].abs = Number(obj.value);
			else schematic[target_num].abs_bb_i = Number(obj.value);
			break;
		case ("tl") :
			if (complex=="abs") schematic[target_num].abs = Number(obj.value);
			else if (complex=="line_zo") schematic[target_num].line_zo = Number(obj.value);
			else if (complex=="er") schematic[target_num].er = Number(obj.value);
			break;
		case ("sr") :
		case ("pr") :
		case ("pc"):
		case ("sc"):
		case ("pi"):
		case ("si"):
			schematic[target_num].abs = Number(obj.value)
			/*
			if      (schematic[target_num].unit[0] == 'f') schematic[target_num].abs = Number(obj.value) * 1e-15;
			else if (schematic[target_num].unit[0] == 'p') schematic[target_num].abs = Number(obj.value) * 1e-12;
			else if (schematic[target_num].unit[0] == 'n') schematic[target_num].abs = Number(obj.value) * 1e-9;
			else if (schematic[target_num].unit[0] == 'u') schematic[target_num].abs = Number(obj.value) * 1e-6;
			else if (schematic[target_num].unit[0] == 'm') schematic[target_num].abs = Number(obj.value) * 1e-3;
			else if (schematic[target_num].unit[0] == 'K') schematic[target_num].abs = Number(obj.value) * 1e3;
			else if (schematic[target_num].unit[0] == 'M') schematic[target_num].abs = Number(obj.value) * 1e6;
	*/
			break;
	}
	update_schem();
}

function pad(n) {
		return n<10 ? '0'+n : n
}

function update_schem() {
	freq = freq_no_unit * freq_multiplier;
	var absolute_val = 0;
	for (i=0;i<schematic.length;i++) {
		//if (schematic[i].abs != 0) { 
			if      (schematic[i].unit[0] == 'f') absolute_val = schematic[i].abs * 1e-15;
			else if (schematic[i].unit[0] == 'p') absolute_val = schematic[i].abs * 1e-12;
			else if (schematic[i].unit[0] == 'n') absolute_val = schematic[i].abs * 1e-9;
			else if (schematic[i].unit[0] == 'u') absolute_val = schematic[i].abs * 1e-6;
			else if (schematic[i].unit[0] == 'm') absolute_val = schematic[i].abs * 1e-3;	//tl can have unit of meters
			else if (schematic[i].unit[0] == 'K') absolute_val = schematic[i].abs * 1e3;
			else if (schematic[i].unit[0] == 'M') absolute_val = schematic[i].abs * 1e6;
			else if (schematic[i].unit[0] == 'λ') absolute_val = schematic[i].abs * (3e8/freq);
			else                                  absolute_val = schematic[i].abs;
			
			switch(schematic[i].type) {
				case ("bb") :
					schematic[i].real = (schematic[i].abs / zo);
					schematic[i].imaginary = (schematic[i].abs_bb_i / zo);
					break;
				case ("sr") :
				case ("pr") :
					schematic[i].real = (absolute_val / zo);
					break;
				case ("pc"):
				case ("sc"):
					schematic[i].imaginary = -(1 / (absolute_val * 2 * Math.PI * freq * zo));
					break;
				case ("pi"):
				case ("si"):
					schematic[i].imaginary = (absolute_val * 2 * Math.PI * freq / zo);
					break;
				case ("tl"):
					schematic[i].line_length = absolute_val;
					break;
			}
			
			schematic[i].real = Number(schematic[i].real).toPrecision(precision);
			schematic[i].imaginary = Number(schematic[i].imaginary).toPrecision(precision);
			
			if ((Math.abs(schematic[i].real) < 0.1) && (schematic[i].real != 0)) schematic[i].real = Number(schematic[i].real).toExponential();
			if ((Math.abs(schematic[i].imaginary) < 0.1) && (schematic[i].imaginary != 0)) schematic[i].imaginary = Number(schematic[i].imaginary).toExponential();
		//}
	}
	//schematic[i].imaginary = schematic[i].imaginary.toFixed(2);
	//schematic[i].real = schematic[i].imaginary.real(2);
	update_smith_chart();
}

function update_smith_chart() {
	//Save first point, which must come from a black box
	console.log(schematic);
	var trace = [];
	var layout_shapes = [];
	var textbox_trace = []
	
	var myNode = document.getElementById("schematic");
	myNode.innerHTML = '';
	real_old = Number(schematic[0].real);
	imag_old = Number(schematic[0].imaginary);
		
	for (var i = 0; i < schematic.length; i++) {
		
		//Add the element to the schematic view
		var div = document.createElement("div");
		unit=[];
		div.setAttribute('class', 'cell');
			
		switch(schematic[i].type) {
			case ("bb") :
				sch_label="Black Box";
				sch_imag=true;
				sch_real=true;
				sch_abs=true;
				sch_icon="black_box";
				break;
			case ("pr") :
				sch_label="Parallel Resistor";
				sch_imag=false;
				sch_real=true;
				sch_abs=true;
				unit = ['mΩ','Ω','KΩ','MΩ'];
				sch_icon="resistor_parallel";
				break;
			case ("sr") :
				sch_label="Series Resistor";
				sch_imag=false;
				sch_real=true;
				sch_abs=true;
				unit = ['mΩ','Ω','KΩ','MΩ'];
				sch_icon="resistor_series";
				break;
			case ("pc") :
				sch_label="Parallel Capacitor";
				sch_imag=true;
				sch_real=false;
				sch_abs=true;
				unit = ['mF','uF','nF','pF','fF'];
				sch_icon="capacitor_parallel";
				break;
			case ("sc") :
				sch_label="Series Capacitor";
				sch_imag=true;
				sch_real=false;
				sch_abs=true;
				unit = ['mF','uF','nF','pF','fF'];
				sch_icon="capacitor_series";
				break;
			case ("pi") :
				sch_label="Parallel Inductor";
				sch_imag=true;
				sch_real=false;
				sch_abs=true;
				unit = ['H','mH','uH','nH','pH'];
				sch_icon="inductor_parallel";
				break;
			case ("si") :
				sch_label="Series Inductor";
				sch_imag=true;
				sch_real=false;
				sch_abs=true;
				unit = ['H','mH','uH','nH','pH'];
				sch_icon="inductor_series";
				break;
			case ("tl") :
				sch_label="Transmission Line";
				sch_imag=false;
				sch_real=false;
				sch_abs=true; //is actually length
				unit = [' m','mm','um','λ'];
				sch_icon="transmission_line";
				break;
		}
		//div.innerHTML = "<p>"+sch_label+"</p>";
		div.innerHTML += "<img src=\"icons/"+sch_icon+".png\" alt="+sch_label+">";
		//if (sch_abs) {
			var dropdown_menu = "<div class=\"abs_box\"><input type=\"number\" value="+schematic[i].abs+" onchange=\"update_schem_abs("+i+",this,'abs')\"></input>";
			dropdown_menu += "<div class=\"spacer\"></div>";
			if (schematic[i].type=='bb') {
				var divclass = 'complex_box';
				dropdown_menu += "<input type=\"number\" value="+schematic[i].abs_bb_i+" onchange=\"update_schem_abs("+i+",this,'abs_bb_i')\"></input>";
				dropdown_menu += "<div class=\"spacer\">j</div>";
			} else {
				var divclass = 'complex_box_wide';
				//Add units selector
				dropdown_menu += "<div id=\"sch_"+i+"\" class=\"wrapper-dropdown-5 "+is_active[i]+"\" tabindex=\"1\" onclick=\"change_class(this.id)\"><div>"+schematic[i].unit+"</div><ul class=\"dropdown\">";
				for (j=0;j<unit.length;j++) {
					dropdown_menu += "<li onclick=\"updatespan(parentElement.parentElement.id,'"+unit[j]+"')\"><a href=\"#\">"+unit[j]+"</a></li>";
				}
				dropdown_menu +="</ul></div>";
			}
			div.innerHTML +=dropdown_menu + "</div>";
		//}
		//} else if (schematic[i].type=='bb') {
			var complex_box = "";
			
			if (sch_real) {
				complex_box += "<div class=\""+divclass+"\">" + schematic[i].real + "</div>";
			}
			if (sch_imag) {
				if (schematic[i].imaginary>=0) {
					var sign = '+';
					var imag_val = schematic[i].imaginary;
				} else {
					var sign = '-';
					var imag_val = Number((schematic[i].imaginary*-1).toPrecision(precision));
					if ((Math.abs(imag_val) < 0.1) && (imag_val != 0)) imag_val = Number(imag_val).toExponential();
				}
				complex_box += "<div class=\"spacer\">"+sign+"</div>";
				complex_box += "<div class=\""+divclass+"\">" + imag_val + "</div><div class=\"spacer\">j</div>";
			}
			complex_box += "";
			div.innerHTML += complex_box;
			if (schematic[i].type=='tl') {
				div.innerHTML +=  "zo = <div class=\"abs_box\"><input type=\"number\" value="+schematic[i].line_zo+" onchange=\"update_schem_abs("+i+",this,'line_zo')\"></input>";
				div.innerHTML +=  "Er = <div class=\"abs_box\"><input type=\"number\" value="+schematic[i].er+" onchange=\"update_schem_abs("+i+",this,'er')\"></input>";
			}
		//}	}
//		if (sch_real) div.innerHTML += "<p"+schematic[i].real+"<b>j</b></p>";
//		if (sch_real) div.innerHTML += "<p"+schematic[i].imaginary+"<b>j</b></p>";

		//can't remove back boxes...
		if (schematic[i].type!='bb') div.innerHTML += "<p onclick=\"schematic.splice("+i+",1); update_smith_chart()\">remove</p>";
		else  div.innerHTML += "<p>&nbsp</p>";
		document.getElementById("schematic").appendChild(div);

		
		//Add the arc to the smith chart
		if ( i > 0) {
			var temp_trace = {}
			
			if ((schematic[i].type[0]=='s') || (schematic[i].type[0]=='b')) {
				//For series elements plotted on normal curves....
				var re = Number(schematic[i].real);
				var im = Number(schematic[i].imaginary);
				var [x_points,y_points] = arc_smith_points(real_old,imag_old,re+real_old,im+imag_old,false);
				real_old = re+real_old;
				imag_old = im+imag_old;
			} else if (schematic[i].type=='tl') {
				//For transmission lines...
				var [x_points,y_points] = arc_smith_points(real_old,imag_old,schematic[i].line_length,schematic[i].line_zo,"transmission_line",schematic[i].er);
			}  else {
				//For parallel elements plotted on rotated graph....
				var start = one_over_complex(real_old,imag_old);
				if ((Math.abs(schematic[i].real) < 0.0001) && (Math.abs(schematic[i].imaginary) < 0.0001)) {
					//don't plot this point...
				} else {
					var schem_inv = one_over_complex(schematic[i].real,schematic[i].imaginary);
					var [x_points,y_points] = arc_smith_points(start[0],start[1],start[0]+schem_inv[0],start[1]+schem_inv[1],true);
					[real_old,imag_old] = one_over_complex(start[0]+schem_inv[0],start[1]+schem_inv[1]);
				}
			}
			temp_trace = {
				x: x_points,
				y: y_points,
				line: {
					color: 'rgb(0, 0, 0)',
					width: 4
				},
				mode: 'lines',
				type: 'scatter'
			};
			trace[i-1]=temp_trace;
		
		
			//add a data point rectangle to the smith chart
			layout_shapes.push({type: "rectangle", x0:Number(start_x_coord)-0.01,y0:Number(start_y_coord)-0.01,x1:Number(start_x_coord)+0.01,y1:Number(start_y_coord)+0.01});
			textbox_trace.push({x:[Number(start_x_coord)+0.04],y:[Number(start_y_coord)-0.03],text:["DP"+i],mode:'text'});
		}
	}
	
	if (schematic.length==1) [end_x_coord,end_y_coord] = find_smith_coord(schematic[0].real,schematic[0].imaginary,false);
	//console.log(schematic[0].real,schematic[0].imaginary,end_x_coord,end_y_coord)
	layout_shapes.push({type: "rectangle", x0:Number(end_x_coord)-0.01,y0:Number(end_y_coord)-0.01,x1:Number(end_x_coord)+0.01,y1:Number(end_y_coord)+0.01});
	textbox_trace.push({x:[Number(end_x_coord)+0.04],y:[Number(end_y_coord)-0.03],text:["DP"+i],mode:'text'});
	
	//Update the impedance box
	document.getElementById("current_impedance").innerHTML = (real_old*zo).toPrecision(3);
	if (imag_old < 0) document.getElementById("current_impedance").innerHTML += "<div class=\"spacer\">-</div>"
	else document.getElementById("current_impedance").innerHTML += "<div class=\"spacer\">+</div>"
	document.getElementById("current_impedance").innerHTML += Math.abs(imag_old*zo).toPrecision(3) + "<div class=\"spacer\">j</div>";
	
	//Calculate the admittance
	var [admittance_real,admittance_imaginary] = one_over_complex(real_old*zo,imag_old*zo);
	document.getElementById("current_admittance").innerHTML = (admittance_real).toPrecision(3);
	if (admittance_imaginary < 0) document.getElementById("current_admittance").innerHTML += "<div class=\"spacer\">-</div>"
	else document.getElementById("current_admittance").innerHTML += "<div class=\"spacer\">+</div>"
	document.getElementById("current_admittance").innerHTML += Math.abs(admittance_imaginary).toPrecision(3) + "<div class=\"spacer\">j</div>";
	
	//Calculate the reflection coefficient -current_admittance (zo-zimp) / (zo+zimp)
	var [bot_real,bot_imag] = one_over_complex(zo + real_old*zo,imag_old*zo);
	console.log(real_old*zo,imag_old*zo);
	console.log(bot_real,bot_imag);
	var reflectio_coeff_real = ((zo - real_old*zo) * bot_real) + ((imag_old*zo)*bot_imag);
	var reflectio_coeff_imag = ((imag_old*zo) * bot_real) + ((zo - real_old*zo) * bot_imag);
	document.getElementById("current_reflection").innerHTML = (reflectio_coeff_real).toPrecision(3);
	if (imag_old < 0) document.getElementById("current_reflection").innerHTML += "<div class=\"spacer\">-</div>"
	else document.getElementById("current_reflection").innerHTML += "<div class=\"spacer\">+</div>"
	document.getElementById("current_reflection").innerHTML += Math.abs(reflectio_coeff_imag).toPrecision(3) + "<div class=\"spacer\">j</div>";
	
	var data = trace.concat(textbox_trace);
	Plotly.newPlot('myDiv', data, {height:layout.height,width:layout.width,hovermode:layout.hovermode,title:layout.title,xaxis:layout.xaxis,yaxis:layout.yaxis,shapes:layout.shapes.concat(layout_shapes)});

	var dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(schematic, null, "\t"));
	var dlAnchorElem = document.getElementById('downloadAnchorElem');
	dlAnchorElem.setAttribute("href",     dataStr     );
	var myDate = new Date();
	var date = myDate.getDate();
	var month = myDate.getMonth();
	var year = myDate.getFullYear();
	var hour = myDate.getHours();
	var minutes = myDate.getMinutes();
	var seconds = myDate.getSeconds();

	var ddmmyyyy = year + pad(month + 1) + pad(date) + pad(hour) + pad(minutes) + pad(seconds);
	dlAnchorElem.setAttribute("download", "online_smith_tool_"+ddmmyyyy+".json");
	
	
}

 
 
    <!-- JAVASCRIPT CODE GOES HERE -->
var trace1 = {
  x: [-1.0,-0.5, 0.0, 0.5],
  y: [-0.1,-0.1,-0.1,-0.1],
  text: ['0Ω','0.33Ω', '1Ω', '3Ω'],
  mode: 'text',
  textfont: {
    color: 'rgb(150, 0, 0)'
  }
};

//function intersectTwoCircles(x1,y1,r1, x2,y2,r2) {
function find_smith_coord(real,imaginary,rotate) {

	if (imaginary > 0) imaginary = Math.max(imaginary,0.001);
	else 			   imaginary = Math.min(imaginary,-0.001);
  
    real = Math.max(real,0.001);
  
	if (rotate==true) {
		var realn = real/(real*real + imaginary*imaginary);
		var imaginaryn = imaginary/(real*real + imaginary*imaginary);
		//window.alert([real,imaginary,realn,imaginaryn]);
		real = realn;
		imaginary = imaginaryn;
	}
	
	//window.alert([realn,imaginaryn]);

  
  if (rotate==true) var x1 = -real / (real+1);
  else		 var x1 = real / (real+1);
  var y1 = 0;
  var r1 = 1 / (real+1)
  if (rotate==true) var x2 = -1;
  else 		 var x2 = 1;
  var y2 = 1 / imaginary;
  var r2 = 1 / Math.abs(imaginary);
  
  var centerdx = x1 - x2;
  var centerdy = y1 - y2;
  var R = Math.sqrt(centerdx * centerdx + centerdy * centerdy);
  if (!(Math.abs(r1 - r2) <= R && R <= r1 + r2)) { // no intersection
    return []; // empty list of results
  }
  // intersection(s) should exist

  var R2 = R*R;
  var R4 = R2*R2;
  var a = (r1*r1 - r2*r2) / (2 * R2);
  var r2r2 = (r1*r1 - r2*r2);
  var c = Math.sqrt(2 * (r1*r1 + r2*r2) / R2 - (r2r2 * r2r2) / R4 - 1);

  var fx = (x1+x2) / 2 + a * (x2 - x1);
  var gx = c * (y2 - y1) / 2;
  var ix1 = (fx + gx).toFixed(5);
  var ix2 = (fx - gx).toFixed(5);

  var fy = (y1+y2) / 2 + a * (y2 - y1);
  var gy = c * (x1 - x2) / 2;
  var iy1 = (fy + gy).toFixed(5);
  var iy2 = (fy - gy).toFixed(5);
  
  if (iy1 == 0) {  iy = iy2; ix=ix2; }
  else {  iy = iy1; ix=ix1; }

  // note if gy == 0 and gx == 0 then the circles are tangent and there is only one solution
  // but that one solution will just be duplicated as the code is currently written
  if (rotate==true) { iy=-iy, ix=-ix; };
  return [ix, iy];
}

function arc_smith_points(x1,y1,x2,y2,rotate,er) {
	
	//console.log("inside smith");
	//console.log(x1,y1,x2,y2,rotate);
	var x_coord=[];
	var y_coord=[];
	resolution = 100;
	[start_x_coord,start_y_coord]=find_smith_coord(x1, y1,rotate);

	if (rotate = "transmission_line") {
		var line_zo=y2;
		var line_length=x2;
		var rt_er=Math.sqrt(er);
		var beta = 2*Math.PI*freq*rt_er/3e8;
		var top_real_temp = x1 * line_zo;
	}
	
	for (i=0;i<resolution+1;i++) {
		if (rotate = "transmission_line") {
		//	console.log("here");
			var tan_beta = Math.tan(beta * i*line_length/resolution);
			var top_imag_temp = (y1*zo + line_zo*tan_beta)* line_zo/zo;
			var bot_real_temp = line_zo-y1*tan_beta*zo;
			var bot_imag_temp = x1*tan_beta*zo;
			[bot_real,bot_imag]=one_over_complex(bot_real_temp,bot_imag_temp);
			var real_answer = (top_real_temp*bot_real)-(top_imag_temp*bot_imag);
			var imag_answer = (top_real_temp*bot_imag)+(top_imag_temp*bot_real);
			//console.log(real_answer,imag_answer,tan_beta);
			[x_coord[i],y_coord[i]]=find_smith_coord(real_answer, imag_answer,false);
		} else {
				[x_coord[i],y_coord[i]]=find_smith_coord(x1 + (x2-x1)*i/resolution, y1 + (y2-y1)*i/resolution,rotate);
		}	
	}
	
	if (rotate = "transmission_line") {
		[end_x_coord,end_y_coord]=find_smith_coord(real_answer, imag_answer,false);
	} else {
		[end_x_coord,end_y_coord]=find_smith_coord(x2, y2,rotate);
	}
	
	//console.log([x_coord,y_coord]);
	return [x_coord,y_coord];
}

var layout = {
  title: 'Circles',
  hovermode: false,
  xaxis: {
    range: [-1, 1],
    zeroline: false
  },
  yaxis: {
    range: [-1, 1]
  },
  width: 1000,
  height: 1000,
  shapes: [
  
	///RESISTANCE CIRCLES
    {
      type: 'circle',
      x0: -1,
      y0: -1,
      x1: 1,
      y1: 1,
      line: {
        dash: 'dot', color: 'rgb(150, 0, 0)'
      }
    },
	{
      type: 'circle',
      x0: -0.5,
      y0: -0.75,
      x1: 1,
      y1: 0.75,
      line: {
        dash: 'dot', color: 'rgb(150, 0, 0)'
      }
    },
    {
      type: 'circle',
      x0: 0,
      y0: -0.5,
      x1: 1,
      y1: 0.5,
      line: {
        dash: 'dot', color: 'rgb(150, 0, 0)'
      }
    },
    {
      type: 'circle',
      x0: 0.5,
      y0: -0.25,
      x1: 1,
      y1: 0.25,
      line: {
        dash: 'dot', color: 'rgb(150, 0, 0)'
      }
    },
	
	
	///ADMITTANCE CIRCLES
    {
      type: 'circle',
      x0: -1,
      y0: -0.5,
      x1: 0,
      y1: 0.5,
      line: {
        dash: 'dot', color: 'rgb(0, 10, 163)'
      }
    },
    {
      type: 'circle',
      x0: -1,
      y0: -0.75,
      x1: 0.5,
      y1: 0.75,
      line: {
        dash: 'dot', color: 'rgb(0, 10, 163)'
      }
    },
    {
      type: 'circle',
      x0: -1,
      y0: -0.25,
      x1: -0.5,
      y1: 0.25,
      line: {
        dash: 'dot', color: 'rgb(0, 10, 163)'
      }
    },
	
	///REACTANCE CIRCLES
    {
      type: 'circle',
      x0: 0.75,
      y0: 0,
      x1: 1.25,
      y1: 0.5,
      line: {
        dash: 'dot', color: 'rgb(252, 114, 2)'
      }
    },
    {
      type: 'circle',
      x0: 0.5,
      y0: 0,
      x1: 1.5,
      y1: 1,
      line: {
        dash: 'dot', color: 'rgb(252, 114, 2)'
      }
    },
    {
      type: 'circle',
      x0: 0.25,
      y0: 0,
      x1: 1.75,
      y1: 1.5,
      line: {
        dash: 'dot', color: 'rgb(252, 114, 2)'
      }
    },
	{
      type: 'circle',
      x0: 0,
      y0: 0,
      x1: 2,
      y1: 2,
      line: {
        dash: 'dot', color: 'rgb(252, 114, 2)'
      }
    },
	{
      type: 'circle',
      x0: -1,
      y0: 0,
      x1: 3,
      y1: 4,
      line: {
        dash: 'dot', color: 'rgb(252, 114, 2)'
      }
    },
	
	//imaginary
	    {
      type: 'circle',
      x0: 0.75,
      y0: 0,
      x1: 1.25,
      y1: -0.5,
      line: {
        dash: 'dot', color: 'rgb(252, 114, 2)'
      }
    },
    {
      type: 'circle',
      x0: 0.5,
      y0: 0,
      x1: 1.5,
      y1: -1,
      line: {
        dash: 'dot', color: 'rgb(252, 114, 2)'
      }
    },
    {
      type: 'circle',
      x0: 0.25,
      y0: 0,
      x1: 1.75,
      y1: -1.5,
      line: {
        dash: 'dot', color: 'rgb(252, 114, 2)'
      }
    },
	{
      type: 'circle',
      x0: 0,
      y0: 0,
      x1: 2,
      y1: -2,
      line: {
        dash: 'dot', color: 'rgb(252, 114, 2)'
      }
    },
		{
      type: 'circle',
      x0: -1,
      y0: 0,
      x1: 3,
      y1: -4,
      line: {
        dash: 'dot', color: 'rgb(252, 114, 2)'
      }
    },
	
	
	///SUSCEPTANCE CIRCLES
	
	    {
      type: 'circle',
      x0: -1.25,
      y0: 0,
      x1: -0.75,
      y1: 0.5,
      line: {
        dash: 'dot', color: 'rgb(100, 24, 242)'
      }
    },
    {
      type: 'circle',
      x0: -1.5,
      y0: 0,
      x1: -0.5,
      y1: 1,
      line: {
        dash: 'dot', color: 'rgb(100, 24, 242)'
      }
    },
    {
      type: 'circle',
      x0: -1.75,
      y0: 0,
      x1: -0.25,
      y1: 1.5,
      line: {
        dash: 'dot', color: 'rgb(100, 24, 242)'
      }
    },
	{
      type: 'circle',
      x0: -2,
      y0: 0,
      x1: 0,
      y1: 2,
      line: {
        dash: 'dot', color: 'rgb(100, 24, 242)'
      }
    },
	    {
      type: 'circle',
      x0: -1.25,
      y0: 0,
      x1: -0.75,
      y1: -0.5,
      line: {
        dash: 'dot', color: 'rgb(100, 24, 242)'
      }
    },
    {
      type: 'circle',
      x0: -1.5,
      y0: 0,
      x1: -0.5,
      y1: -1,
      line: {
        dash: 'dot', color: 'rgb(100, 24, 242)'
      }
    },
    {
      type: 'circle',
      x0: -1.75,
      y0: 0,
      x1: -0.25,
      y1: -1.5,
      line: {
        dash: 'dot', color: 'rgb(100, 24, 242)'
      }
    },
	{
      type: 'circle',
      x0: -2,
      y0: 0,
      x1: 0,
      y1: -2,
      line: {
        dash: 'dot', color: 'rgb(100, 24, 242)'
      }
    },
  ]
};

//var [x_points,y_points] = arc_smith_points(1,0.0,1,-1.5,false)
//var [x_points2,y_points2] = arc_smith_points(0.3,0.46,-20,0.46,true)
//window.alert(x_points2);
//window.alert(y_points2);
//var p1=find_smith_coord(1,0.5);
//var p2=find_smith_coord(1,5.5);
/*
var trace2 = {
  x: x_points,
  y: y_points,
  line: {
      color: 'rgb(0, 0, 0)',
      width: 4
    },
  mode: 'lines',
  type: 'scatter'
};
var trace3 = {
  x: x_points2,
  y: y_points2,
  line: {
      color: 'rgb(0, 0, 0)',
      width: 4
    },
  mode: 'lines',
  type: 'scatter'
};
*/
//var data = [trace1,trace2,trace3];
//var data = null;

//Plotly.newPlot('myDiv', data, layout);


		/*
function DropDown(el) {
	this.dd = el;
	this.placeholder = this.dd.children('span');
	this.opts = this.dd.find('ul.dropdown > li');
	this.val = '';
	this.index = -1;
	this.initEvents();
}
DropDown.prototype = {
	initEvents : function() {
		var obj = this;

		obj.dd.on('click', function(event){
			$(this).toggleClass('active');
			return false;
		});

		obj.opts.on('click',function(){
			var opt = $(this);
			obj.val = opt.text();
			obj.index = opt.index();
			obj.placeholder.text(obj.val);
		});
	},
	getValue : function() {
		return this.val;
	},
	getIndex : function() {
		return this.index;
	}
}

$(function() {

	var dd = new DropDown( $('#dd') );

	$(document).click(function() {
		// all dropdowns
		$('.wrapper-dropdown-5').removeClass('active');
	});

});*/
  update_schem();

		</script>
		<!--ADDING A COMMENT BOX!-->
		<!--From here -->
		<!-- https://www.freecommentscript.com/ -->
		<!-- Begin Comments JavaScript Code --><script type="text/javascript" async>//function ajaxpath_5a9f8bc18a80d(url){return window.location.href == '' ? url : url.replace('&s=','&s=' + escape(window.location.href));}(function(){document.write('<div id="fcs_div_5a9f8bc18a80d"><a title="free comment script" href="http://www.freecommentscript.com">&nbsp;&nbsp;<b>Free HTML User Comments</b>...</a></div>');fcs_5a9f8bc18a80d=document.createElement('script');fcs_5a9f8bc18a80d.type="text/javascript";fcs_5a9f8bc18a80d.src=ajaxpath_5a9f8bc18a80d((document.location.protocol=="https:"?"https:":"http:")+"//www.freecommentscript.com/GetComments2.php?p=5a9f8bc18a80d&s=#!5a9f8bc18a80d");setTimeout("document.getElementById('fcs_div_5a9f8bc18a80d').appendChild(fcs_5a9f8bc18a80d)",1);})();</script><noscript><div><a href="http://www.freecommentscript.com" title="free html user comment box">Free Comment Script</a></div></noscript><!-- End Comments JavaScript Code -->
		
		</body>